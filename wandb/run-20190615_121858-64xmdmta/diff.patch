diff --git a/keras_dropout.py b/keras_dropout.py
index 801df39..b1809ca 100644
--- a/keras_dropout.py
+++ b/keras_dropout.py
@@ -13,9 +13,9 @@ run = wandb.init()
 config = run.config
 config.optimizer = "adam"
 config.epochs = 50
-config.dropout = 0.4
+config.dropout = 0.3
 config.hidden_nodes = 100
-
+config.batch_size =1024
 # load data
 (X_train, y_train), (X_test, y_test) = mnist.load_data()
 img_width = X_train.shape[1]
@@ -38,12 +38,12 @@ model=Sequential()
 model.add(Flatten(input_shape=(img_width,img_height)))
 model.add(Dropout(config.dropout))
 model.add(Dense(config.hidden_nodes, activation='relu'))
-model.add(Dropout(config.dropout))
+#model.add(Dropout(config.dropout))
 model.add(Dense(num_classes, activation='softmax'))
 model.compile(loss='categorical_crossentropy', optimizer=config.optimizer,
                     metrics=['accuracy'])
 
 
 # Fit the model
-model.fit(X_train, y_train, validation_data=(X_test, y_test),
+model.fit(X_train, y_train, validation_data=(X_test, y_test), batch_size=config.batch_size,
         epochs=config.epochs, callbacks=[WandbCallback(data_type="image", labels=labels)])
diff --git a/keras_perceptron.py b/keras_perceptron.py
index 71abdcd..b8617ce 100644
--- a/keras_perceptron.py
+++ b/keras_perceptron.py
@@ -13,9 +13,9 @@ import wandb
 run = wandb.init()
 config = run.config
 config.optimizer = "adam"
-config.epochs = 10
+config.epochs = 50
 config.hidden_nodes = 100
-
+config.batch_size =512
 # load data
 (X_train, y_train), (X_test, y_test) = mnist.load_data()
 img_width = X_train.shape[1]
@@ -40,11 +40,12 @@ num_classes = y_train.shape[1]
 model = Sequential()
 model.add(Flatten(input_shape=(img_width, img_height)))
 model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))#dense is basically linear regression
 model.add(Dense(num_classes, activation='softmax'))
 model.compile(loss='categorical_crossentropy', optimizer=config.optimizer,
               metrics=['accuracy'])
 model.summary()
 # Fit the model
-model.fit(X_train, y_train, validation_data=(X_test, y_test),
+model.fit(X_train, y_train, validation_data=(X_test, y_test), batch_size=config.batch_size,
           epochs=config.epochs,
           callbacks=[WandbCallback(data_type="image", labels=labels)])
